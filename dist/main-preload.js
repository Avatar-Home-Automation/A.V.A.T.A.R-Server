const {contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('electronAPI', {
  onUpdateLogger: (callback) => ipcRenderer.on('update-logger', callback),
  onUpdateLoggerConsole: (callback) => ipcRenderer.on('update-loggerConsole', callback),
  addClientNode: (callback) => ipcRenderer.on('addClientNode', callback),
  removeClientNode: (callback) => ipcRenderer.on('removeClientNode', callback),
  toAppReload: (callback) => ipcRenderer.on('to-appReload', callback),
  toAppExit: (callback) => ipcRenderer.on('to-appExit', callback),
  onUpdateProperties: (callback) => ipcRenderer.on('update-properties', callback),
  propertiesChanged: (callback) => ipcRenderer.on('properties-changed', callback),
  tooltipSpeak : (callback) => ipcRenderer.on('tooltip-Speak', callback),
  setNodeBackground: (callback) => ipcRenderer.on('set-Node-Background', callback),
  onInitApp: (callback) => ipcRenderer.on('initApp', callback),
  deleteWidget: (callback) => ipcRenderer.on('deleteWidget', callback),
  createWidget: (callback) => ipcRenderer.on('createWidget', callback),
  removeWidgetElementByID: (callback) => ipcRenderer.on('removeWidgetElementByID', callback),
  removeWidgetElementByClassName: (callback) => ipcRenderer.on('removeWidgetElementByClassName', callback),
  initWidgets: (callback) => ipcRenderer.on('initWidgets', callback),
  newPluginWidgetInfo: (callback) => ipcRenderer.on('newPluginWidgetInfo', callback),
  setInfoClient: (callback) => ipcRenderer.on('setInfoClient', callback),
  newVersion: (callback) => ipcRenderer.on('newVersion', callback),
  showRestartBox: (callback) => ipcRenderer.on('showRestartBox', callback),
  
  getMsg: (arg) => ipcRenderer.invoke('get-msg', arg),
  showMenu: (arg) => ipcRenderer.invoke('show-Menu', arg),
  getVirtualClients: (arg) => ipcRenderer.invoke('getVirtualClients', arg),
  isCloseApp: () => ipcRenderer.invoke('isCloseApp'),
  closeApp: (arg) => ipcRenderer.invoke('closeApp', arg),
  reloadApp: (arg) => ipcRenderer.invoke('reloadApp', arg),
  pluginWidgetAction: (arg) => ipcRenderer.invoke('pluginWidgetAction', arg),
  refreshPluginWidgetInfo: (arg) => ipcRenderer.invoke('refreshPluginWidgetInfo', arg),
  getNewValuePluginWidgetById: (arg) => ipcRenderer.invoke('getNewValuePluginWidgetById', arg),
  getPluginWidgets: (arg) => ipcRenderer.invoke('getPluginWidgets', arg),
  readyToShow: (arg) => ipcRenderer.invoke('readyToShow', arg)
})
